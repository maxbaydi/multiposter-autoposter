# -*- coding: utf-8 -*-
import requests
from requests.auth import HTTPBasicAuth
import os
from PIL import Image

BROWSER_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "DNT": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Sec-Fetch-User": "?1"
}

class WordPressClient:
    def __init__(self, url, username, app_password):
        self.url = url.rstrip('/')
        self.auth = HTTPBasicAuth(username, app_password)

    def test_connection(self):
        r = requests.get(f'{self.url}/wp-json/wp/v2/posts', auth=self.auth, headers=BROWSER_HEADERS)
        return r.status_code == 200

    def optimize_image_for_upload(self, file_path, max_width=1920, max_height=1080, quality=85):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, —É–º–µ–Ω—å—à–∞—è —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        
        Args:
            file_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            max_width: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            max_height: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 
            quality: –∫–∞—á–µ—Å—Ç–≤–æ JPEG (1-100)
            
        Returns:
            –ø—É—Ç—å –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        try:
            with Image.open(file_path) as img:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                width, height = img.size
                print(f"üñºÔ∏è –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {width}x{height}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–º–µ–Ω—å—à–∞—Ç—å
                if width <= max_width and height <= max_height:
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
                    return file_path
                
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                ratio = min(max_width/width, max_height/height)
                new_width = int(width * ratio)
                new_height = int(height * ratio)
                
                print(f"üîÑ –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ: {new_width}x{new_height}")
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                base_name = os.path.splitext(file_path)[0]
                extension = os.path.splitext(file_path)[1]
                optimized_path = f"{base_name}_optimized{extension}"
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                if extension.lower() in ['.jpg', '.jpeg']:
                    resized_img = resized_img.convert('RGB')
                    resized_img.save(optimized_path, 'JPEG', quality=quality, optimize=True)
                else:
                    resized_img.save(optimized_path, optimize=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                original_size = os.path.getsize(file_path)
                optimized_size = os.path.getsize(optimized_path)
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {original_size/1024/1024:.1f}MB ‚Üí {optimized_size/1024/1024:.1f}MB")
                
                return optimized_path
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return file_path

    def upload_media(self, file_path, optimize=True):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ WordPress
        
        Args:
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            optimize: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            
        Returns:
            tuple: (media_id, media_url)
        """
        upload_path = file_path
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        if optimize and file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
            print("üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")
            upload_path = self.optimize_image_for_upload(file_path)
        
        try:
            with open(upload_path, 'rb') as f:
                filename = os.path.basename(upload_path)
                headers = BROWSER_HEADERS.copy()
                headers['Content-Disposition'] = f'attachment; filename={filename}'
                
                print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º: {filename} ({os.path.getsize(upload_path)/1024/1024:.1f}MB)")
                
                r = requests.post(
                    f'{self.url}/wp-json/wp/v2/media',
                    headers=headers,
                    files={'file': (filename, f)},
                    auth=self.auth,
                    timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                )
                
            if r.status_code in (200, 201):
                result = r.json()
                print(f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ID {result['id']}")
                return result['id'], result['source_url']
            else:
                raise Exception(f'Upload failed: {r.status_code} - {r.text}')
                
        except requests.exceptions.Timeout:
            raise Exception('Upload timeout - —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
        except requests.exceptions.RequestException as e:
            raise Exception(f'Network error during upload: {str(e)}')
        finally:
            # –£–¥–∞–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if upload_path != file_path and os.path.exists(upload_path):
                try:
                    os.remove(upload_path)
                    print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                except:
                    pass

    def create_or_get_tags(self, tag_names):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥–∏ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        
        Args:
            tag_names: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ–≥–æ–≤
            
        Returns:
            —Å–ø–∏—Å–æ–∫ ID —Ç–µ–≥–æ–≤
        """
        if not tag_names:
            return []
        
        tag_ids = []
        
        for tag_name in tag_names:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥
            search_response = requests.get(
                f'{self.url}/wp-json/wp/v2/tags',
                params={'search': tag_name, 'per_page': 1},
                auth=self.auth,
                headers=BROWSER_HEADERS
            )
            
            if search_response.status_code == 200:
                existing_tags = search_response.json()
                if existing_tags and existing_tags[0]['name'].lower() == tag_name.lower():
                    tag_ids.append(existing_tags[0]['id'])
                    print(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥: {tag_name} (ID: {existing_tags[0]['id']})")
                    continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
            try:
                create_response = requests.post(
                    f'{self.url}/wp-json/wp/v2/tags',
                    json={'name': tag_name, 'slug': tag_name.lower().replace(' ', '-').replace('/', '-')},
                    auth=self.auth,
                    headers={**BROWSER_HEADERS, 'Content-Type': 'application/json'}
                )
                
                if create_response.status_code in (200, 201):
                    new_tag = create_response.json()
                    tag_ids.append(new_tag['id'])
                    print(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ–≥: {tag_name} (ID: {new_tag['id']})")
                elif create_response.status_code == 400:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ç–µ–≥–µ
                    try:
                        error_data = create_response.json()
                        if error_data.get('code') == 'term_exists':
                            # –¢–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                            existing_tag_id = error_data.get('data', {}).get('term_id') or error_data.get('additional_data', [None])[0]
                            if existing_tag_id:
                                tag_ids.append(existing_tag_id)
                                print(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥: {tag_name} (ID: {existing_tag_id})")
                            else:
                                print(f"‚ö†Ô∏è –¢–µ–≥ {tag_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥ {tag_name}: {create_response.text}")
                    except:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥ {tag_name}: {create_response.text}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥ {tag_name}: {create_response.text}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞ {tag_name}: {e}")
                
        return tag_ids

    def create_post(self, title, content, status='publish', tags=None, media_ids=None, category_id=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –≤ WordPress
        
        Args:
            title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
            content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞
            status: —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ ('publish', 'draft')
            tags: —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ (—Å—Ç—Ä–æ–∫–∏)
            media_ids: ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è featured image
            category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        """
        data = {
            'title': title,
            'content': content,
            'status': status,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category_id:
            data['categories'] = [category_id]
            print(f"üìÇ –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ID: {category_id}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
        if tags:
            if isinstance(tags, str):
                # –ï—Å–ª–∏ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö
                tag_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            else:
                tag_list = tags
                
            tag_ids = self.create_or_get_tags(tag_list)
            if tag_ids:
                data['tags'] = tag_ids
                print(f"üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: {len(tag_ids)} —à—Ç.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º featured image
        if media_ids:
            featured_id = media_ids[0] if isinstance(media_ids, list) else media_ids
            data['featured_media'] = featured_id
            print(f"üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω featured image: ID {featured_id}")
        
        headers = BROWSER_HEADERS.copy()
        headers['Content-Type'] = 'application/json'
        
        try:
            r = requests.post(
                f'{self.url}/wp-json/wp/v2/posts',
                json=data,
                auth=self.auth,
                headers=headers,
                timeout=60
            )
            
            if r.status_code in (200, 201):
                result = r.json()
                print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω: ID {result['id']}, —Å—Ç–∞—Ç—É—Å: {result['status']}")
                return result
            else:
                raise Exception(f'Post creation failed: {r.status_code} - {r.text}')
                
        except requests.exceptions.Timeout:
            raise Exception('Post creation timeout')
        except requests.exceptions.RequestException as e:
            raise Exception(f'Network error during post creation: {str(e)}')

    def get_categories(self):
        headers = BROWSER_HEADERS.copy()
        r = requests.get(
            f'{self.url}/wp-json/wp/v2/categories?per_page=100',
            auth=self.auth,
            headers=headers
        )
        if r.status_code == 200:
            return r.json()
        else:
            raise Exception(f'Failed to fetch categories: {r.text}')
            
    def test_api(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WordPress REST API"""
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.url}")
        print(f"–ü–æ–ª–Ω—ã–π URL: {self.url}/wp-json/wp/v2/posts")
        
        # –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\n1. –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        r1 = requests.get(f'{self.url}/wp-json/wp/v2/posts', headers=BROWSER_HEADERS)
        print(f"–°—Ç–∞—Ç—É—Å: {r1.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {r1.text[:300]}...")
        
        # –° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        print("\n2. –ó–∞–ø—Ä–æ—Å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:")
        r2 = requests.get(f'{self.url}/wp-json/wp/v2/posts', auth=self.auth, headers=BROWSER_HEADERS)
        print(f"–°—Ç–∞—Ç—É—Å: {r2.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {r2.text[:300]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –±–µ–∑ https:// –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if self.url.startswith('https://'):
            fixed_url = self.url
            print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL:")
            print(f"–¢–µ–∫—É—â–∏–π URL: {self.url}")
            print(f"–í –∫–æ–¥–µ URL —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫–∞–∫: https://{self.url}/wp-json/wp/v2/posts")
            print("–≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è https://")
            
        return r2.status_code == 200 