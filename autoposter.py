# -*- coding: utf-8 -*-
import time
import random
import json
import sys
import os
import logging
import signal
import traceback
from datetime import datetime, timedelta, time as dtime
from logging.handlers import RotatingFileHandler
from utils import (
    generate_post_from_theme, load_themes, add_publication_history,
    publish_to_wordpress, publish_to_telegram
)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_PATH = os.path.join(BASE_DIR, 'config.json')
DB_PATH = os.path.join(BASE_DIR, 'autoposter.db')
THEME_FILE = os.path.join(BASE_DIR, 'theme_host.json')
STOP_FILE = os.path.join(BASE_DIR, 'autoposter.stop')
RESTART_FILE = os.path.join(BASE_DIR, 'autoposter.restart')
HEALTH_FILE = os.path.join(BASE_DIR, 'autoposter.health')
# –§–∞–π–ª—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
PUBLISH_NOW_FILE = os.path.join(BASE_DIR, 'autoposter.publish_now')
STATUS_FILE = os.path.join(BASE_DIR, 'autoposter.status')
RESET_TODAY_FILE = os.path.join(BASE_DIR, 'autoposter.reset_today')

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –µ—Å–ª–∏ –Ω–µ—Ç –≤ config.json)
DEFAULT_PUBLISHING_CONFIG = {
    "posts_per_day": 3,
    "publish_window": [8, 20],
    "interval_min": 1800,
    "interval_max": 10800,
    "post_delay": 60,
    "cycle_restart_delay": 60,
    "max_retries": 3,
    "retry_delay": 300
}

DEFAULT_LOGGING_CONFIG = {
    "max_file_size": 10485760,  # 10MB
    "backup_count": 5,
    "encoding": "utf-8"
}

DEFAULT_SYSTEM_CONFIG = {
    "check_interval": 60,
    "image_base_path": "./img",
    "health_check_interval": 300,
    "circuit_breaker_threshold": 5,
    "circuit_breaker_timeout": 1800
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.json)
POSTS_PER_DAY = DEFAULT_PUBLISHING_CONFIG["posts_per_day"]
PUBLISH_WINDOW = DEFAULT_PUBLISHING_CONFIG["publish_window"]
INTERVAL_MIN = DEFAULT_PUBLISHING_CONFIG["interval_min"]
INTERVAL_MAX = DEFAULT_PUBLISHING_CONFIG["interval_max"]
POST_DELAY = DEFAULT_PUBLISHING_CONFIG["post_delay"]
CYCLE_RESTART_DELAY = DEFAULT_PUBLISHING_CONFIG["cycle_restart_delay"]
MAX_RETRIES = DEFAULT_PUBLISHING_CONFIG["max_retries"]
RETRY_DELAY = DEFAULT_PUBLISHING_CONFIG["retry_delay"]
CHECK_INTERVAL = DEFAULT_SYSTEM_CONFIG["check_interval"]
HEALTH_CHECK_INTERVAL = DEFAULT_SYSTEM_CONFIG["health_check_interval"]
CIRCUIT_BREAKER_THRESHOLD = DEFAULT_SYSTEM_CONFIG["circuit_breaker_threshold"]
CIRCUIT_BREAKER_TIMEOUT = DEFAULT_SYSTEM_CONFIG["circuit_breaker_timeout"]

# IMG_BASE_PATH –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ load_config_settings()
IMG_BASE_PATH = os.path.join(BASE_DIR, 'img')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è circuit breaker
WORDPRESS_FAILURES = 0
WORDPRESS_CIRCUIT_OPEN_TIME = None
TELEGRAM_FAILURES = 0
TELEGRAM_CIRCUIT_OPEN_TIME = None

# –§–ª–∞–≥ –¥–ª—è graceful shutdown
SHUTDOWN_REQUESTED = False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global SHUTDOWN_REQUESTED
    log_print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è graceful shutdown...", 'warning')
    SHUTDOWN_REQUESTED = True

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGTERM, signal_handler)
signal.signal(signal.SIGINT, signal_handler)

def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    logs_dir = os.path.join(BASE_DIR, 'logs')
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª
    log_file = os.path.join(logs_dir, 'autoposter.log')
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    try:
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            config = json.load(f)
        logging_config = config.get('logging', DEFAULT_LOGGING_CONFIG)
    except:
        logging_config = DEFAULT_LOGGING_CONFIG
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    handler = RotatingFileHandler(
        log_file, 
        maxBytes=logging_config.get("max_file_size", DEFAULT_LOGGING_CONFIG["max_file_size"]),
        backupCount=logging_config.get("backup_count", DEFAULT_LOGGING_CONFIG["backup_count"]),
        encoding=logging_config.get("encoding", DEFAULT_LOGGING_CONFIG["encoding"])
    )
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    formatter = logging.Formatter(
        '%(asctime)s [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)
    
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è nohup.out)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    return logger

def log_print(message, level='info'):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        level: —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ('info', 'warning', 'error', 'debug')
    """
    # –û–±—ã—á–Ω—ã–π print –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    print(message)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    if hasattr(log_print, 'logger'):
        if level == 'error':
            log_print.logger.error(message)
        elif level == 'warning':
            log_print.logger.warning(message)
        elif level == 'debug':
            log_print.logger.debug(message)
        else:
            log_print.logger.info(message)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
try:
    log_print.logger = setup_logging()
    log_print("üìä –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    log_path = os.path.join(BASE_DIR, 'logs', 'autoposter.log')
    log_print("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: " + log_path)
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: " + str(e))
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    log_print.logger = None

def check_files():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    required_dirs = [
        (os.path.join(BASE_DIR, 'logs'), "–ª–æ–≥–æ–≤"),
        (IMG_BASE_PATH, "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    ]
    
    for dir_path, dir_desc in required_dirs:
        if not os.path.exists(dir_path):
            try:
                os.makedirs(dir_path, exist_ok=True)
                print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ " + dir_desc + ": " + dir_path)
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ " + dir_desc + ": " + str(e))
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for path in [CONFIG_PATH, THEME_FILE]:
        if not os.path.exists(path):
            print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª " + path)
            if path == CONFIG_PATH:
                print('üí° –°–æ–∑–¥–∞–π—Ç–µ config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ config.json.example')
            elif path == THEME_FILE:
                print('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª theme_host.json –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞')
            sys.exit(1)

def load_config():
    with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
        return json.load(f)

def load_config_settings():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    
    Returns:
        dict: –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    """
    global POSTS_PER_DAY, PUBLISH_WINDOW, INTERVAL_MIN, INTERVAL_MAX
    global POST_DELAY, CYCLE_RESTART_DELAY, CHECK_INTERVAL, IMG_BASE_PATH
    global MAX_RETRIES, RETRY_DELAY, HEALTH_CHECK_INTERVAL
    global CIRCUIT_BREAKER_THRESHOLD, CIRCUIT_BREAKER_TIMEOUT
    
    try:
        config = load_config()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publishing_config = config.get('publishing', {})
        POSTS_PER_DAY = publishing_config.get('posts_per_day', DEFAULT_PUBLISHING_CONFIG['posts_per_day'])
        PUBLISH_WINDOW = tuple(publishing_config.get('publish_window', DEFAULT_PUBLISHING_CONFIG['publish_window']))
        INTERVAL_MIN = publishing_config.get('interval_min', DEFAULT_PUBLISHING_CONFIG['interval_min'])
        INTERVAL_MAX = publishing_config.get('interval_max', DEFAULT_PUBLISHING_CONFIG['interval_max'])
        POST_DELAY = publishing_config.get('post_delay', DEFAULT_PUBLISHING_CONFIG['post_delay'])
        CYCLE_RESTART_DELAY = publishing_config.get('cycle_restart_delay', DEFAULT_PUBLISHING_CONFIG['cycle_restart_delay'])
        MAX_RETRIES = publishing_config.get('max_retries', DEFAULT_PUBLISHING_CONFIG['max_retries'])
        RETRY_DELAY = publishing_config.get('retry_delay', DEFAULT_PUBLISHING_CONFIG['retry_delay'])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        system_config = config.get('system', {})
        CHECK_INTERVAL = system_config.get('check_interval', DEFAULT_SYSTEM_CONFIG['check_interval'])
        HEALTH_CHECK_INTERVAL = system_config.get('health_check_interval', DEFAULT_SYSTEM_CONFIG['health_check_interval'])
        CIRCUIT_BREAKER_THRESHOLD = system_config.get('circuit_breaker_threshold', DEFAULT_SYSTEM_CONFIG['circuit_breaker_threshold'])
        CIRCUIT_BREAKER_TIMEOUT = system_config.get('circuit_breaker_timeout', DEFAULT_SYSTEM_CONFIG['circuit_breaker_timeout'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        img_path = system_config.get('image_base_path', DEFAULT_SYSTEM_CONFIG['image_base_path'])
        if img_path.startswith('./'):
            IMG_BASE_PATH = os.path.join(BASE_DIR, img_path[2:])
        elif img_path.startswith('/'):
            IMG_BASE_PATH = img_path
        else:
            IMG_BASE_PATH = os.path.join(BASE_DIR, img_path)
        
        log_print("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.json:")
        log_print("   ‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: " + str(POSTS_PER_DAY))
        log_print("   ‚Ä¢ –û–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: " + str(PUBLISH_WINDOW[0]).zfill(2) + ":00 - " + str(PUBLISH_WINDOW[1]).zfill(2) + ":00")
        log_print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: " + str(INTERVAL_MIN//60) + "-" + str(INTERVAL_MAX//60) + " –º–∏–Ω")
        log_print("   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞: " + str(POST_DELAY) + " —Å–µ–∫")
        log_print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥: " + str(CHECK_INTERVAL) + " —Å–µ–∫")
        log_print("   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤: " + str(MAX_RETRIES))
        log_print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª health check: " + str(HEALTH_CHECK_INTERVAL) + " —Å–µ–∫")
        log_print("   ‚Ä¢ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: " + IMG_BASE_PATH)
        
        return config
        
    except Exception as e:
        log_print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.json: " + str(e), 'warning')
        log_print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", 'warning')
        return load_config()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

def get_published_today(db_path):
    from db_manager import DBManager
    db = DBManager(db_path)
    today = datetime.now().date().isoformat()
    recent = db.get_recent_publications(days=1)
    return set((row[0], row[1]) for row in recent if row[3][:10] == today)

def calculate_next_post_time():
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    
    Returns:
        tuple: (next_post_datetime, description) - –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    """
    now = datetime.now()
    published_today = get_published_today(DB_PATH)
    posts_count_today = len(published_today)
    total_window_seconds = (PUBLISH_WINDOW[1] - PUBLISH_WINDOW[0]) * 3600
    if POSTS_PER_DAY > 1:
        interval_seconds = total_window_seconds // (POSTS_PER_DAY - 1)
    else:
        interval_seconds = total_window_seconds

    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    if posts_count_today >= POSTS_PER_DAY:
        tomorrow = (now + timedelta(days=1)).replace(
            hour=PUBLISH_WINDOW[0], 
            minute=0, 
            second=0, 
            microsecond=0
        )
        return tomorrow, "–∑–∞–≤—Ç—Ä–∞ –≤ " + str(PUBLISH_WINDOW[0]).zfill(2) + ":00 (–ª–∏–º–∏—Ç " + str(POSTS_PER_DAY) + " –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)"

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if PUBLISH_WINDOW[0] <= now.hour < PUBLISH_WINDOW[1]:
        # –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
        first_post_time = now.replace(hour=PUBLISH_WINDOW[0], minute=0, second=0, microsecond=0)
        next_time = first_post_time + timedelta(seconds=interval_seconds * posts_count_today)
        if next_time <= now:
            next_time = now + timedelta(seconds=INTERVAL_MIN)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –∑–∞ –æ–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if next_time.hour >= PUBLISH_WINDOW[1]:
            tomorrow = (now + timedelta(days=1)).replace(
                hour=PUBLISH_WINDOW[0], 
                minute=0, 
                second=0, 
                microsecond=0
            )
            return tomorrow, "–∑–∞–≤—Ç—Ä–∞ –≤ " + str(PUBLISH_WINDOW[0]).zfill(2) + ":00 (–≤—ã—Ö–æ–¥ –∑–∞ –æ–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)"
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
        time_diff = next_time - now
        total_seconds = time_diff.total_seconds()
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        if hours > 0:
            time_desc = "—á–µ—Ä–µ–∑ " + str(hours) + "—á " + str(minutes) + "–º–∏–Ω"
        else:
            time_desc = "—á–µ—Ä–µ–∑ " + str(minutes) + "–º–∏–Ω"
        return next_time, time_desc

    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –≤–Ω–µ –æ–∫–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if now.hour < PUBLISH_WINDOW[0]:
        today_start = now.replace(
            hour=PUBLISH_WINDOW[0], 
            minute=0, 
            second=0, 
            microsecond=0
        )
        return today_start, "—Å–µ–≥–æ–¥–Ω—è –≤ " + str(PUBLISH_WINDOW[0]).zfill(2) + ":00"
    else:
        tomorrow = (now + timedelta(days=1)).replace(
            hour=PUBLISH_WINDOW[0], 
            minute=0, 
            second=0, 
            microsecond=0
        )
        return tomorrow, "–∑–∞–≤—Ç—Ä–∞ –≤ " + str(PUBLISH_WINDOW[0]).zfill(2) + ":00"

def format_next_post_message():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    next_time, description = calculate_next_post_time()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
    time_str = next_time.strftime("%H:%M")
    date_str = next_time.strftime("%d.%m")
    
    published_today = get_published_today(DB_PATH)
    posts_count = len(published_today)
    
    return "‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: " + description + " (" + time_str + ", " + date_str + ") | –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: " + str(posts_count) + "/" + str(POSTS_PER_DAY)

def check_command_files():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, False - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    if os.path.exists(STOP_FILE):
        print('üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.')
        os.remove(STOP_FILE)
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if os.path.exists(PUBLISH_NOW_FILE):
        print('üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.')
        try:
            force_publish()
            print('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        except Exception as e:
            print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ' + str(e))
        finally:
            os.remove(PUBLISH_NOW_FILE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç—É—Å–∞
    if os.path.exists(STATUS_FILE):
        print('üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞.')
        try:
            print_status()
        except Exception as e:
            print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç—É—Å–∞: ' + str(e))
        finally:
            os.remove(STATUS_FILE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞
    if os.path.exists(RESET_TODAY_FILE):
        print('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.')
        try:
            reset_today()
            print('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω–∞.')
        except Exception as e:
            print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: ' + str(e))
        finally:
            os.remove(RESET_TODAY_FILE)
    
    return False

def force_publish():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    """
    try:
        config = load_config_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        themes = load_themes(THEME_FILE)
        published_today = get_published_today(DB_PATH)
        
        log_print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...")
        
        post = generate_post_from_theme(themes, published_today, config['gpt'], config['telegram'], img_base_path=IMG_BASE_PATH)
        if post:
            log_print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é: " + post['brand'] + " - " + post['title'][:50] + "...")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress
            try:
                publish_to_wordpress(post, config['wordpress'])
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'success')
                log_print('‚úÖ WordPress: ' + post["brand"] + ' ‚Äî ' + post["title"][:50] + "...")
            except Exception as e:
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                log_print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ WordPress: " + error_msg, 'error')
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'error: ' + str(e)[:200])
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
            try:
                publish_to_telegram(post, config['telegram'])
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'success')
                log_print('‚úÖ Telegram: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
            except Exception as e:
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                log_print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: " + error_msg, 'error')
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'error: ' + str(e)[:200])
            
            log_print("üìù –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: " + post['brand'] + " ‚Äî " + post['title'][:50] + "...")
            log_print(format_next_post_message())
        else:
            log_print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—Å–µ —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è.", 'warning')
    except Exception as e:
        log_print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: " + str(e), 'error')
        raise

def publish_one():
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É
    """
    try:
        check_files()
        config = load_config_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        themes = load_themes(THEME_FILE)
        
        log_print("üìã –†–∞–∑–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é telegram –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ config.json
        published_today = get_published_today(DB_PATH)
        post = generate_post_from_theme(themes, published_today, config['gpt'], config['telegram'], img_base_path=IMG_BASE_PATH)
        if post:
            log_print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é: " + post['brand'] + " - " + post['title'][:50] + "...")
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress
            try:
                publish_to_wordpress(post, config['wordpress'])
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'success')
                log_print("‚úÖ WordPress: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            except Exception as e:
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                log_print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ WordPress: " + error_msg, 'error')
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'error: ' + str(e)[:200])
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
            try:
                publish_to_telegram(post, config['telegram'])
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'success')
                log_print("‚úÖ Telegram: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            except Exception as e:
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                log_print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: " + error_msg, 'error')
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'error: ' + str(e)[:200])
            
            log_print("üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: " + post['brand'] + " ‚Äî " + post['title'][:50] + "...")
            log_print(format_next_post_message())
        else:
            log_print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—Å–µ —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è.", 'warning')
    except Exception as e:
        log_print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: " + str(e), 'error')
        raise

def print_status():
    published_today = get_published_today(DB_PATH)
    print("üìä –°–µ–≥–æ–¥–Ω—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: " + str(len(published_today)) + "/" + str(POSTS_PER_DAY))
    for brand, title in published_today:
        print("   ‚Ä¢ " + brand + ": " + title)
    print(format_next_post_message())

def reset_today():
    from db_manager import DBManager
    db = DBManager(DB_PATH)
    today = datetime.now().date().isoformat()
    c = db.conn.cursor()
    c.execute('DELETE FROM publication_history WHERE published_at LIKE ?', (today + '%',))
    db.conn.commit()
    print('üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω–∞.')
    print(format_next_post_message())

def get_today_slots():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–π (datetime.time) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    """
    slots = []
    start, end = PUBLISH_WINDOW
    total_seconds = (end - start) * 3600
    if POSTS_PER_DAY == 1:
        slots = [dtime(hour=start, minute=0)]
    else:
        interval = total_seconds // (POSTS_PER_DAY - 1)
        for i in range(POSTS_PER_DAY):
            slot_seconds = start * 3600 + interval * i
            slot_hour = slot_seconds // 3600
            slot_minute = (slot_seconds % 3600) // 60
            slots.append(dtime(hour=int(slot_hour), minute=int(slot_minute)))
    return slots

def main_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    """
    global SHUTDOWN_REQUESTED
    last_health_check = 0
    
    try:
        check_files()
        config = load_config_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        themes = load_themes(THEME_FILE)
        log_print('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.')
        log_print('üìÖ –û–∫–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ' + str(PUBLISH_WINDOW[0]).zfill(2) + ':00 - ' + str(PUBLISH_WINDOW[1]).zfill(2) + ':00')
        log_print('üìä –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ' + str(POSTS_PER_DAY))
        log_print('‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: ' + str(INTERVAL_MIN//60) + '-' + str(INTERVAL_MAX//60) + ' –º–∏–Ω—É—Ç')
        log_print('üîÑ Retry –ª–æ–≥–∏–∫–∞: ' + str(MAX_RETRIES) + ' –ø–æ–≤—Ç–æ—Ä–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º ' + str(RETRY_DELAY) + '—Å')
        log_print('‚ö° Circuit breaker: ' + str(CIRCUIT_BREAKER_THRESHOLD) + ' –æ—à–∏–±–æ–∫ –∑–∞ ' + str(CIRCUIT_BREAKER_TIMEOUT) + '—Å')
        log_print('üìÅ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã:')
        log_print('   ‚Ä¢ autoposter.stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞')
        log_print('   ‚Ä¢ autoposter.restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
        log_print('   ‚Ä¢ autoposter.publish_now - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é')
        log_print('   ‚Ä¢ autoposter.status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
        log_print('   ‚Ä¢ autoposter.reset_today - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
        log_print('---')
        log_print(format_next_post_message())
        log_print('---')
        
        # –ü–µ—Ä–≤—ã–π health check
        write_health_check()
        
    except Exception as e:
        log_print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: " + str(e), 'error')
        log_print("üîç –ü–æ–ª–Ω—ã–π traceback:", 'error')
        log_print(traceback.format_exc(), 'error')
        log_print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã config.json –∏ theme_host.json", 'error')
        return

    while not SHUTDOWN_REQUESTED:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if check_command_files():
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ restart
            if os.path.exists(RESTART_FILE):
                log_print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ restart. –í—ã—Ö–æ–¥–∏–º –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...", 'warning')
                os.remove(RESTART_FILE)
                break
            
            # Health check
            current_time = time.time()
            if current_time - last_health_check > HEALTH_CHECK_INTERVAL:
                write_health_check()
                last_health_check = current_time
            
            now = datetime.now()
            today = now.date()
            slots = get_today_slots()
            published_today = get_published_today(DB_PATH)
            published_count = len(published_today)
            
            # 1. –î–æ–≥–æ–Ω—è—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            for i, slot in enumerate(slots):
                if SHUTDOWN_REQUESTED:
                    break
                    
                slot_dt = now.replace(hour=slot.hour, minute=slot.minute, second=0, microsecond=0)
                if slot_dt < now and published_count <= i:
                    try:
                        post = generate_post_from_theme(themes, published_today, config['gpt'], config['telegram'], img_base_path=IMG_BASE_PATH)
                        if post:
                            log_print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–Ω—è—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é: " + post['brand'] + " - " + post['title'][:50] + "...")
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É retry
                            results = publish_with_retry(post, config)
                            
                            if results['wordpress'] or results['telegram']:
                                log_print("üìù –î–æ–≥–æ–Ω—è—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + post['brand'] + " ‚Äî " + post['title'][:50] + "...")
                                log_print(format_next_post_message())
                                
                                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                                published_today = get_published_today(DB_PATH)
                                published_count = len(published_today)
                                
                                if not SHUTDOWN_REQUESTED:
                                    time.sleep(POST_DELAY)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                            else:
                                log_print("‚ùå –î–æ–≥–æ–Ω—è—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—É–¥–∞—á–Ω–∞", 'error')
                        else:
                            log_print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—Å–µ —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è.", 'warning')
                    except Exception as e:
                        log_print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: " + str(e), 'error')
                        log_print("üîç Traceback: " + traceback.format_exc(), 'error')
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç
                        continue
            
            if SHUTDOWN_REQUESTED:
                break
            
            # 2. –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
            now = datetime.now()
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
            published_today = get_published_today(DB_PATH)
            published_count = len(published_today)
            
            for i, slot in enumerate(slots):
                if SHUTDOWN_REQUESTED:
                    break
                    
                slot_dt = now.replace(hour=slot.hour, minute=slot.minute, second=0, microsecond=0)
                if slot_dt > now and published_count <= i:
                    sleep_time = (slot_dt - now).total_seconds()
                    hours = int(sleep_time // 3600)
                    minutes = int((sleep_time % 3600) // 60)
                    log_print("üí§ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: " + str(hours) + "—á " + str(minutes) + "–º–∏–Ω (" + str(slot.hour).zfill(2) + ":" + str(slot.minute).zfill(2) + ")")
                    
                    # –û–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π shutdown
                    total_slept = 0
                    while total_slept < sleep_time and not SHUTDOWN_REQUESTED:
                        if check_command_files():
                            return
                        
                        # Health check –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        current_time = time.time()
                        if current_time - last_health_check > HEALTH_CHECK_INTERVAL:
                            write_health_check()
                            last_health_check = current_time
                        
                        chunk_sleep = min(CHECK_INTERVAL, sleep_time - total_slept)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                        time.sleep(chunk_sleep)
                        total_slept += chunk_sleep
                    
                    if SHUTDOWN_REQUESTED:
                        break
                    
                    try:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–æ—Å—Ç–∞
                        published_today = get_published_today(DB_PATH)
                        post = generate_post_from_theme(themes, published_today, config['gpt'], config['telegram'], img_base_path=IMG_BASE_PATH)
                        if post:
                            log_print("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é: " + post['brand'] + " - " + post['title'][:50] + "...")
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É retry
                            results = publish_with_retry(post, config)
                            
                            if results['wordpress'] or results['telegram']:
                                log_print("üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: " + post['brand'] + " ‚Äî " + post['title'][:50] + "...")
                                log_print(format_next_post_message())
                                
                                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                                published_today = get_published_today(DB_PATH)
                                published_count = len(published_today)
                            else:
                                log_print("‚ùå –ü–ª–∞–Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—É–¥–∞—á–Ω–∞", 'error')
                        else:
                            log_print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—Å–µ —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è.", 'warning')
                    except Exception as e:
                        log_print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: " + str(e), 'error')
                        log_print("üîç Traceback: " + traceback.format_exc(), 'error')
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç
                        continue
            
            if SHUTDOWN_REQUESTED:
                break
            
            # 3. –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –ø—Ä–æ—à–ª–∏ ‚Äî –∂–¥—ë–º –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –∑–∞–≤—Ç—Ä–∞
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            published_today = get_published_today(DB_PATH)
            published_count = len(published_today)
            
            if published_count >= POSTS_PER_DAY:
                now = datetime.now()
                first_slot_tomorrow = (now + timedelta(days=1)).replace(hour=slots[0].hour, minute=slots[0].minute, second=0, microsecond=0)
                sleep_time = (first_slot_tomorrow - now).total_seconds()
                hours = int(sleep_time // 3600)
                minutes = int((sleep_time % 3600) // 60)
                log_print("üí§ –í—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –∑–∞–≤—Ç—Ä–∞: " + str(hours) + "—á " + str(minutes) + "–º–∏–Ω (" + str(slots[0].hour).zfill(2) + ":" + str(slots[0].minute).zfill(2) + ")")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π shutdown
                total_slept = 0
                while total_slept < sleep_time and not SHUTDOWN_REQUESTED:
                    if check_command_files():
                        return
                    
                    # Health check –≤–æ –≤—Ä–µ–º—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                    current_time = time.time()
                    if current_time - last_health_check > HEALTH_CHECK_INTERVAL:
                        write_health_check()
                        last_health_check = current_time
                    
                    chunk_sleep = min(CHECK_INTERVAL, sleep_time - total_slept)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    time.sleep(chunk_sleep)
                    total_slept += chunk_sleep
            else:
                # –ï—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                log_print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                if not SHUTDOWN_REQUESTED:
                    time.sleep(CHECK_INTERVAL)
                
        except KeyboardInterrupt:
            log_print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", 'warning')
            SHUTDOWN_REQUESTED = True
            break
        except Exception as e:
            log_print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: " + str(e), 'error')
            log_print("üîç –ü–æ–ª–Ω—ã–π traceback:", 'error')
            log_print(traceback.format_exc(), 'error')
            log_print("üîÑ –ü–∞—É–∑–∞ " + str(CYCLE_RESTART_DELAY) + " —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º —Ü–∏–∫–ª–∞...", 'warning')
            
            if not SHUTDOWN_REQUESTED:
                time.sleep(CYCLE_RESTART_DELAY)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                continue
            else:
                break

    # Graceful shutdown
    log_print("üèÅ –ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...", 'info')
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º health check —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        health_data = {
            "timestamp": datetime.now().isoformat(),
            "status": "stopped",
            "pid": os.getpid(),
            "shutdown_reason": "graceful"
        }
        with open(HEALTH_FILE, 'w', encoding='utf-8') as f:
            json.dump(health_data, f, indent=2)
    except:
        pass
    
    log_print("üèÅ –ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

def stop_bot():
    with open(STOP_FILE, 'w', encoding='utf-8') as f:
        f.write('stop')
    print('üõë –§–∞–π–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')

def publish_now_command():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    with open(PUBLISH_NOW_FILE, 'w', encoding='utf-8') as f:
        f.write('publish_now')
    print('üì¢ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.')

def status_command():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    with open(STATUS_FILE, 'w', encoding='utf-8') as f:
        f.write('status')
    print('üìä –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.')

def reset_today_command():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    with open(RESET_TODAY_FILE, 'w', encoding='utf-8') as f:
        f.write('reset_today')
    print('üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.')

def help_message():
    print('''
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã AutoPoster:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  start         ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  stop          ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (—Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª autoposter.stop)
  once          ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É
  next          ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é (–∞–Ω–∞–ª–æ–≥ once)
  status        ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  reset_today   ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  help          ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—â–∏–º –±–æ—Ç–æ–º:
  publish_now   ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
  bot_status    ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞
  bot_reset     ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞

üìÅ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–º–∞–Ω–¥:
  ‚Ä¢ autoposter.stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
  ‚Ä¢ autoposter.publish_now - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
  ‚Ä¢ autoposter.status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  ‚Ä¢ autoposter.reset_today - —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python autoposter.py start          # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  python autoposter.py publish_now    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
  python autoposter.py stop          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
''')

def write_health_check():
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª health check —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º"""
    try:
        health_data = {
            "timestamp": datetime.now().isoformat(),
            "status": "running",
            "pid": os.getpid(),
            "published_today": len(get_published_today(DB_PATH)),
            "posts_per_day": POSTS_PER_DAY,
            "wordpress_failures": WORDPRESS_FAILURES,
            "telegram_failures": TELEGRAM_FAILURES
        }
        with open(HEALTH_FILE, 'w', encoding='utf-8') as f:
            json.dump(health_data, f, indent=2)
    except Exception as e:
        log_print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ health check: " + str(e), 'warning')

def is_circuit_breaker_open(service_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ circuit breaker –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
    global WORDPRESS_FAILURES, WORDPRESS_CIRCUIT_OPEN_TIME
    global TELEGRAM_FAILURES, TELEGRAM_CIRCUIT_OPEN_TIME
    
    now = time.time()
    
    if service_name == 'wordpress':
        if WORDPRESS_FAILURES >= CIRCUIT_BREAKER_THRESHOLD:
            if WORDPRESS_CIRCUIT_OPEN_TIME is None:
                WORDPRESS_CIRCUIT_OPEN_TIME = now
                log_print("‚ö° Circuit breaker –û–¢–ö–†–´–¢ –¥–ª—è WordPress", 'warning')
                return True
            elif now - WORDPRESS_CIRCUIT_OPEN_TIME < CIRCUIT_BREAKER_TIMEOUT:
                return True
            else:
                log_print("üîÑ Circuit breaker —Å–±—Ä–æ—à–µ–Ω –¥–ª—è WordPress", 'info')
                WORDPRESS_FAILURES = 0
                WORDPRESS_CIRCUIT_OPEN_TIME = None
                return False
    elif service_name == 'telegram':
        if TELEGRAM_FAILURES >= CIRCUIT_BREAKER_THRESHOLD:
            if TELEGRAM_CIRCUIT_OPEN_TIME is None:
                TELEGRAM_CIRCUIT_OPEN_TIME = now
                log_print("‚ö° Circuit breaker –û–¢–ö–†–´–¢ –¥–ª—è Telegram", 'warning')
                return True
            elif now - TELEGRAM_CIRCUIT_OPEN_TIME < CIRCUIT_BREAKER_TIMEOUT:
                return True
            else:
                log_print("üîÑ Circuit breaker —Å–±—Ä–æ—à–µ–Ω –¥–ª—è Telegram", 'info')
                TELEGRAM_FAILURES = 0
                TELEGRAM_CIRCUIT_OPEN_TIME = None
                return False
    
    return False

def record_service_failure(service_name):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è circuit breaker"""
    global WORDPRESS_FAILURES, TELEGRAM_FAILURES
    
    if service_name == 'wordpress':
        WORDPRESS_FAILURES += 1
        log_print(f"üìä WordPress –æ—à–∏–±–∫–∏: {WORDPRESS_FAILURES}/{CIRCUIT_BREAKER_THRESHOLD}", 'warning')
    elif service_name == 'telegram':
        TELEGRAM_FAILURES += 1
        log_print(f"üìä Telegram –æ—à–∏–±–∫–∏: {TELEGRAM_FAILURES}/{CIRCUIT_BREAKER_THRESHOLD}", 'warning')

def record_service_success(service_name):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞"""
    global WORDPRESS_FAILURES, TELEGRAM_FAILURES
    
    if service_name == 'wordpress':
        WORDPRESS_FAILURES = max(0, WORDPRESS_FAILURES - 1)
    elif service_name == 'telegram':
        TELEGRAM_FAILURES = max(0, TELEGRAM_FAILURES - 1)

def publish_with_retry(post, config, max_retries=None):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç —Å retry –ª–æ–≥–∏–∫–æ–π –∏ circuit breaker
    
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {'wordpress': bool, 'telegram': bool}
    """
    if max_retries is None:
        max_retries = MAX_RETRIES
    
    results = {'wordpress': False, 'telegram': False}
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ WordPress —Å retry
    if not is_circuit_breaker_open('wordpress'):
        for attempt in range(max_retries + 1):
            try:
                publish_to_wordpress(post, config['wordpress'])
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'success')
                log_print("‚úÖ WordPress: " + post['title'][:50] + "...")
                record_service_success('wordpress')
                results['wordpress'] = True
                break
            except Exception as e:
                record_service_failure('wordpress')
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                
                if attempt < max_retries:
                    retry_delay = RETRY_DELAY * (attempt + 1)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    log_print(f"‚ùå WordPress –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {error_msg}", 'error')
                    log_print(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...", 'warning')
                    time.sleep(retry_delay)
                else:
                    log_print(f"‚ùå WordPress –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {error_msg}", 'error')
                    add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'error: ' + str(e)[:200])
    else:
        log_print("‚ö° WordPress –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker –æ—Ç–∫—Ä—ã—Ç)", 'warning')
        add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'wordpress', 'error: circuit breaker open')
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram —Å retry
    if not is_circuit_breaker_open('telegram'):
        for attempt in range(max_retries + 1):
            try:
                publish_to_telegram(post, config['telegram'])
                add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'success')
                log_print("‚úÖ Telegram: –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                record_service_success('telegram')
                results['telegram'] = True
                break
            except Exception as e:
                record_service_failure('telegram')
                error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
                
                if attempt < max_retries:
                    retry_delay = RETRY_DELAY * (attempt + 1)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    log_print(f"‚ùå Telegram –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {error_msg}", 'error')
                    log_print(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...", 'warning')
                    time.sleep(retry_delay)
                else:
                    log_print(f"‚ùå Telegram –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {error_msg}", 'error')
                    add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'error: ' + str(e)[:200])
    else:
        log_print("‚ö° Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker –æ—Ç–∫—Ä—ã—Ç)", 'warning')
        add_publication_history(DB_PATH, post['brand'], post['original_topic'], 'telegram', 'error: circuit breaker open')
    
    return results

if __name__ == '__main__':
    if len(sys.argv) == 1 or sys.argv[1] == 'start':
        main_loop()
    elif sys.argv[1] == 'stop':
        stop_bot()
    elif sys.argv[1] == 'once' or sys.argv[1] == 'next':
        publish_one()
    elif sys.argv[1] == 'status':
        print_status()
    elif sys.argv[1] == 'reset_today':
        reset_today()
    elif sys.argv[1] == 'publish_now':
        publish_now_command()
    elif sys.argv[1] == 'bot_status':
        status_command()
    elif sys.argv[1] == 'bot_reset':
        reset_today_command()
    elif sys.argv[1] == 'help':
        help_message()
    else:
        print('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.') 