#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import os
from PIL import Image, ImageDraw, ImageFont
import shutil

def add_image_watermark(input_image_path, output_image_path, watermark_path=None, 
                       position=(10, 10), opacity=180, watermark_scale=0.25):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    Args:
        input_image_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        output_image_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        watermark_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–µ—Å–ª–∏ None, –∏—â–µ—Ç watermark_gvnbiz_2.png –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ)
        position: –ø–æ–∑–∏—Ü–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (x, y)
        opacity: –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0-255)
        watermark_scale: –º–∞—Å—à—Ç–∞–± –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Returns:
        –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
    """
    try:
        # –ï—Å–ª–∏ –ø—É—Ç—å –∫ –≤–æ–¥—è–Ω–æ–º—É –∑–Ω–∞–∫—É –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª
        if watermark_path is None:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è watermark.py)
            current_dir = os.path.dirname(os.path.abspath(__file__))
            watermark_path = os.path.join(current_dir, 'watermark_gvnbiz_2.png')
            print(f"–ò—â–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: {watermark_path}")
        
        # –ï—Å–ª–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        if not os.path.exists(watermark_path):
            print(f"–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {watermark_path}")
            print("–§–∞–π–ª –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
            shutil.copy2(input_image_path, output_image_path)
            return output_image_path
        
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: {os.path.basename(watermark_path)}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_image_path) as base_image:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            if base_image.mode != 'RGBA':
                base_image = base_image.convert('RGBA')
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
            with Image.open(watermark_path) as watermark:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –≤ RGBA
                if watermark.mode != 'RGBA':
                    watermark = watermark.convert('RGBA')
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                base_width, base_height = base_image.size
                watermark_width = int(base_width * watermark_scale)
                watermark_height = int(watermark_width * watermark.size[1] / watermark.size[0])
                
                print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {base_width}x{base_height}")
                print(f"–†–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {watermark_width}x{watermark_height}")
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                watermark = watermark.resize((watermark_width, watermark_height), Image.Resampling.LANCZOS)
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –¥–ª—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                transparent = Image.new('RGBA', base_image.size, (0, 0, 0, 0))
                transparent.paste(watermark, position, watermark)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                alpha = transparent.split()[-1]
                alpha = alpha.point(lambda p: int(p * opacity / 255.0))
                transparent.putalpha(alpha)
                
                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                result = Image.alpha_composite(base_image, transparent)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if input_image_path.lower().endswith(('.jpg', '.jpeg')):
                    result = result.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result.save(output_image_path, quality=95)
                
        print(f"‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {os.path.basename(output_image_path)}")
        return output_image_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        try:
            shutil.copy2(input_image_path, output_image_path)
            print(f"üìÑ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {os.path.basename(output_image_path)}")
        except Exception as copy_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {copy_error}")
        return output_image_path

def create_text_watermark(input_image_path, output_image_path, text="GVN.biz", 
                         position=None, font_size=None, opacity=128):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    Args:
        input_image_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        output_image_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        text: —Ç–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        position: –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (x, y), –µ—Å–ª–∏ None - –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        font_size: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞, –µ—Å–ª–∏ None - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        opacity: –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0-255)
    
    Returns:
        –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
    """
    try:
        with Image.open(input_image_path) as base_image:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA
            if base_image.mode != 'RGBA':
                base_image = base_image.convert('RGBA')
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            txt_layer = Image.new('RGBA', base_image.size, (255, 255, 255, 0))
            draw = ImageDraw.Draw(txt_layer)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            if font_size is None:
                font_size = max(20, base_image.size[0] // 40)
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
                font = ImageFont.truetype("arial.ttf", font_size)
            except:
                try:
                    font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", font_size)
                except:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    font = ImageFont.load_default()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            if position is None:
                # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª —Å –æ—Ç—Å—Ç—É–ø–æ–º
                x = base_image.size[0] - text_width - 20
                y = base_image.size[1] - text_height - 20
                position = (x, y)
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            shadow_offset = 2
            draw.text((position[0] + shadow_offset, position[1] + shadow_offset), 
                     text, font=font, fill=(0, 0, 0, opacity // 2))
            draw.text(position, text, font=font, fill=(255, 255, 255, opacity))
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
            result = Image.alpha_composite(base_image, txt_layer)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if input_image_path.lower().endswith(('.jpg', '.jpeg')):
                result = result.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result.save(output_image_path, quality=95)
        
        print(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {os.path.basename(output_image_path)}")
        return output_image_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        shutil.copy2(input_image_path, output_image_path)
        return output_image_path

def find_watermark_file():
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    
    Returns:
        –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ None
    """
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    possible_paths = [
        os.path.join(current_dir, 'watermark_gvnbiz_2.png'),
        os.path.join(current_dir, '..', 'images', 'watermarks', 'watermark_gvnbiz_2.png'),
        os.path.join(current_dir, 'watermarks', 'watermark_gvnbiz_2.png'),
        os.path.join(current_dir, 'img', 'watermark_gvnbiz_2.png')
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            print(f"üéØ –ù–∞–π–¥–µ–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: {path}")
            return path
    
    print("‚ö†Ô∏è –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
    return None

if __name__ == "__main__":
    print("üåä –ú–æ–¥—É–ª—å watermark –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üìÅ –ü–æ–∏—Å–∫ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞...")
    watermark_file = find_watermark_file()
    
    print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("- add_image_watermark(): –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
    print("- create_text_watermark(): –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
    print("- find_watermark_file(): –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
    
    if watermark_file:
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º: {os.path.basename(watermark_file)}")
    else:
        print(f"\n‚ö†Ô∏è –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª 'watermark_gvnbiz_2.png' –≤ –ø–∞–ø–∫—É autoposter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤") 